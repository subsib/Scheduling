Questions :
-----------


1. Comment sélectionner une classe de scheduler pour qu'elle soit... "réaliste", 
savoir ce qui est le plus "réaliste" quoi.
2. Comment avoir une idée de ce qu'on pourrait attendre en fonction de l'OS ? Qu'est-ce que ça influence ?
3. Comment fonctionne particulièrement HIPERROS ? C'est quoi ces histoires de 
"coeur maître et de coeurs esclaves. Le coeur maître envoie des systèmes à scheduler aux slaves ?!"
"Inter-Process Communication : IPC "


classe : le plus large 
sporadic, deadline contraintes
On oublie sporadic, en fait...


RUN, différentiel algo théorique et résultat obtenu.
Celui-ci ou un autre...

linux rt distribue le scheduling, symétrie
HIPPEROS, c'est plutôt asym.

P-Fair, non. U_EDF, 
DP fair, pas mal.

deadline = period
Pas de dépendance avec calculs offline. Partie outil + preprocessing intéressante

devrait ajouter de l'info dans les structures qui représentent les tâches.

Y a un successeur à RUN. QPD, RPQ ?!! chercher. QPR ?
Garde optimalité, sporadic.

Peu de contraintes niveau choix ordonnanceur. 

Première tâche : modèle de tâche, voir nb de papiers qui le cite, etc.
Regarder implémentations existantes.

nb articles + implementations.
Qui a "utilisé".

Algo non optimal, mais qui diminue nb préemptions ou migrations.